version: "3.9"

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"  # 포트 충돌 해결
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring
    depends_on:
      - prometheus
    restart: unless-stopped
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: discord-rag-backend
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - ./rag_agent:/app/rag_agent
    ports:
      - "8001:8001"  # 포트 변경
    command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload
    depends_on:
      - rag_agent
    networks:
      - default
      - monitoring  # Prometheus 메트릭 수집을 위해 monitoring 네트워크 추가

  rag_agent:
    build:
      context: ./rag_agent
      dockerfile: Dockerfile
    container_name: discord-rag-agent
    volumes:
      - ./rag_agent:/app
    command: ["sleep", "infinity"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: discord-rag-frontend
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_BACKEND_API_URL=http://localhost:8000/api/v1
    command: npm run dev
    depends_on:
      - backend

networks:
  default:
    driver: bridge
  monitoring:
    driver: bridge
    name: monitoring_network

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
