version: "3.9"

services:
  # ==================== Vector Database ====================
  weaviate:
    image: semitechnologies/weaviate:1.24.10
    container_name: weaviate
    ports:
      - "8080:8080"
    env_file:
      - ./.env
    environment:
      CLUSTER_HOSTNAME: weaviate-1
      QUERY_DEFAULTS_LIMIT: "25"
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: "/var/lib/weaviate"
      DEFAULT_VECTORIZER_MODULE: "text2vec-openai"
      ENABLE_MODULES: "text2vec-openai"
      OPENAI_APIKEY: "${OPENAI_API_KEY}"
      PROMETHEUS_MONITORING_ENABLED: "true"
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - app_net
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q -O - http://localhost:8080/v1/meta >/dev/null 2>&1 || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== Backend API ====================
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: discord-rag-api
    env_file:
      - ./.env
    environment:
      - SERVICE_CONTEXT=backend
    volumes:
      - ./backend:/app # Safe for global installation
      - ./rag_agent:/app/rag_agent
    ports:
      - "8001:8001"
    command: uvicorn app.main:app --host 0.0.0.0 --port 8001
    depends_on:
      weaviate:
        condition: service_healthy
    networks:
      - app_net
      - monitoring
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - |
          python - <<'PY'
          import socket, sys, time

          ok = 0
          for _ in range(10):
              try:
                  s = socket.create_connection(('127.0.0.1', 8001), timeout=2)
                  s.close()
                  ok = 1
                  break
              except Exception:
                  time.sleep(3)

          sys.exit(0 if ok else 1)
          PY
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 60s

  # ==================== Discord Bot ====================
  bot:
    build:
      context: ./bots
      dockerfile: Dockerfile
    container_name: discord-rag-bot
    env_file:
      - ./.env
    environment:
      - SERVICE_CONTEXT=bot
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_TEST_GUILD_ID=579281488789635083
      - DISCORD_CLIENT_ID=1424785730307227769
      - DISCORD_GUILD_ID=579281488789635083
      - USE_ASSET_EMBEDS=false
      - ASSET_UP_PATH=assets/thumbs-up.png
      - ASSET_DOWN_PATH=assets/thumb-down.png
      - ASSET_REGEN_PATH=assets/refresh-page-option.png
    depends_on:
      api: { condition: service_started }
    networks:
      - app_net
    restart: unless-stopped
    profiles:
      - discord # Optional profile for Discord bot

  # ==================== Frontend ====================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: discord-rag-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_BACKEND_API_URL=http://localhost:8001/api/v1
      - BACKEND_URL=http://api:8001
      - NODE_ENV=production
    depends_on:
      api: { condition: service_started }
    networks:
      - app_net
    restart: unless-stopped

  # ==================== Monitoring ====================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - app_net
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/rag-metrics-dashboard.json
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app_net
      - monitoring
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  app_net:
    driver: bridge
    name: discord_rag_network
  monitoring:
    driver: bridge
    name: monitoring_network

volumes:
  weaviate_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
