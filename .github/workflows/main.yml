name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Backend Testing and Linting
  backend:
    name: Backend (FastAPI)
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v4

      - name: Set Git to use LF line endings (backend)
        run: git config --global core.autocrlf input

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies (Backend)
        run: poetry install --no-interaction --no-ansi

      - name: Run Linting (Backend)
        run: |
          poetry run isort --check-only --profile black --line-length 88 .
          poetry run ruff check --line-length 88 .
          poetry run ruff format .
          poetry run ruff format --check .

      - name: Run Tests (Backend)
        run: poetry run pytest

  # Job 2: RAG Agent Testing and Linting
  rag_agent:
    name: RAG Agent Pipeline
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: rag_agent

    steps:
      - uses: actions/checkout@v4

      - name: Set Git to use LF line endings (rag_agent)
        run: git config --global core.autocrlf input

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies (RAG Agent)
        run: poetry install --no-interaction --no-ansi

      - name: Run Linting (RAG Agent)
        run: |
          poetry run isort --check-only --profile black --line-length 88 .
          poetry run ruff check --line-length 88 .
          poetry run ruff format .
          poetry run ruff format --check .

      - name: Run Tests (RAG Agent)
        run: poetry run pytest

  # Job 3: Frontend Testing and Linting
  frontend:
    name: Frontend (React/Next.js)
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - uses: actions/checkout@v4

      - name: Set Git to use LF line endings (frontend)
        run: git config --global core.autocrlf input

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies (Frontend)
        run: npm ci

      - name: Run Prettier & Lint (Frontend)
        run: |
          npx prettier --check .
          npx eslint . --ext .js,.ts,.tsx || true  # optional: remove '|| true' to fail on lint errors

      - name: Run Tests (Frontend)
        run: npm run test --if-present # if you add frontend tests later

  # Job 4: Docker Build (depends on backend and rag_agent)
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend, rag_agent]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: discord-rag-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build RAG agent Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./rag_agent/Dockerfile
          push: false
          tags: discord-rag-agent:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: discord-rag-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build bot Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./bots
          file: ./bots/Dockerfile
          push: false
          tags: discord-rag-bot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: Security Scan (runs in parallel with other jobs)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        working-directory: ./backend
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run security scan
        working-directory: ./backend
        run: |
          poetry run bandit -r . -f json -o bandit-report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: backend/bandit-report.json
          retention-days: 30

  # Job 6: Final Integration Check (depends on all previous jobs)
  integration-check:
    name: Integration Check
    runs-on: ubuntu-latest
    needs: [backend, rag_agent, frontend, docker-build, security-scan]

    steps:
      - name: All checks passed
        run: |
          echo "✅ All CI/CD checks passed successfully!"
          echo "✅ Backend tests and linting: PASSED"
          echo "✅ RAG Agent tests and linting: PASSED"
          echo "✅ Frontend tests and linting: PASSED"
          echo "✅ Docker builds: PASSED"
          echo "✅ Security scan: PASSED"
